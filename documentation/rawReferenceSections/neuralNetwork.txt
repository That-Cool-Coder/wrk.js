wrk.NeuralNetwork()
wrk.NeuralNetwork()
new wrk.NeuralNetwork()
A generic neural network class
/src/machineLearning/neuralNetwork.js
nolink

NEXTSECTION

wrk.NeuralNetwork.createInputLayer()
wrk.NeuralNetwork.createInputLayer(size)
network.addInputLayer(5)
Create the input layer for the neural network with size neurons. Will overwrite an existing input layer if there is one in that network already.
src/machineLearning/neuralNetwork.js
nolink

NEXTSECTION

wrk.NeuralNetwork.addHiddenLayer()
wrk.NeuralNetwork.addHiddenLayer(size)
network.addHiddenLayer(10)
Add a new hidden layer to the neural network with size neurons. Appends to the list of hidden layers.
/src/machineLearning/neuralNetwork.js
nolink

NEXTSECTION

wrk.NeuralNetwork.createOutputLayer()
wrk.NeuralNetwork.createOutputLayer(size)
network.createOutputLayer(2)
Add the output layer for the neural network with size neurons. Will overwrite an existing output layer if there is one in that network already.
/src/machineLearning/neuralNetwork.js
nolink

NEXTSECTION

wrk.NeuralNetwork.connect()
wrk.NeuralNetwork.connect()
network.connect()
Connect all of the neurons in the network together. Not recommended to call it multiple times if the network has been changed.
/src/machineLearning/neuralNetwork.js
nolink

NEXTSECTION

wrk.NeuralNetwork.activate()
wrk.NeuralNetwork.activate(input)
var results = network.activate([0, 1])
Activate the neural network using input.
/src/machineLearning/neuralNetwork.js
nolink

NEXTSECTION

wrk.NeuralNetwork.train()
wrk.NeuralNetwork.train(dataset, iterations=1)
network.train([{ inputs: [0,0], outputs: [0] }, { inputs: [0,1], outputs: [1] }, { inputs: [1,0], outputs: [1] }, { inputs: [1,1], outputs: [0] }])
Train the network using the dataset iterations times.
/src/machineLearning/neuralNetwork.js
/src/machineLearning/neuralNetwork.js
nolink

NEXTSECTION

wrk.NeuralNetwork.propagate()
wrk.NeuralNetwork.propagate(target)
network.propagate([0, 1])
propagate how wrong you were (should this be in the public API or is it the network's private data?)
/src/machineLearning/neuralNetwork.js
nolink

NEXTSECTION

wrk.NeuralNetwork.saveTraining()
wrk.NeuralNetwork.saveTraining()
var savedTraining = network.saveTraining()
Return a nested array containing the network's current state.
/src/machineLearning/neuralNetwork.js
nolink

NEXTSECTION

wrk.NeuralNetwork.loadTraining()
wrk.NeuralNetwork.loadTraining(savedTraining)
network.loadTraining(savedTraining)
Load the training from a nested array in the form exported by wrk.NeuralNetwork.saveTraining(). The network that is loading the training must have already had its layers created and connected. Fails if the network that saved the training doesn't have the same layer sizes and amounts as the one receiving the training.
/src/machineLearning/neuralNetwork.js
nolink