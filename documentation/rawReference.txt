wrk.NeuralNetwork() \ A generic neural network class \ /src/machineLearning/neuralNetwork.js \ new wrk.NeuralNetwork() \ nolink
wrk.NeuralNetwork.createInputLayer(size) \ Create the input layer for the neural network with size neurons. Will overwrite an existing input layer if there is one in that network already. \ src/machineLearning/neuralNetwork.js \ network.addInputLayer(5) \ nolink
wrk.NeuralNetwork.addHiddenLayer(size) \ Add a new hidden layer to the neural network with size neurons. Appends to the list of hidden layers. \ /src/machineLearning/neuralNetwork.js \ network.addHiddenLayer(10) \ nolink
wrk.NeuralNetwork.createOutputLayer(size) \ Add the output layer for the neural network with size neurons. Will overwrite an existing output layer if there is one in that network already. \ /src/machineLearning/neuralNetwork.js \ newtork.createOutputLayer(2) \ nolink
wrk.NeuralNetwork.connect() \ Connect all of the neurons in the network together. Not recommended to call it multiple times if the network has been changed. \ /src/machineLearning/neuralNetwork.js \ network.connect() \ nolink
wrk.NeuralNetwork.train(dataset, iterations) \ Train the network using the dataset iterations times. \ /src/machineLearning/neuralNetwork.js \ /src/machineLearning/neuralNetwork.js \ network.train([{ inputs: [0,0], outputs: [0] }, { inputs: [0,1], outputs: [1] }, { inputs: [1,0], outputs: [1] }, { inputs: [1,1], outputs: [0] }]) \ nolink
wrk.NeuralNetwork.activate(input) \ Activate the neural network using input. \ /src/machineLearning/neuralNetwork.js \ var results = network.activate([0, 1]) \ nolink
wrk.NeuralNetwork.saveTraining() \ Return a nested array containing the network's current state. \ /src/machineLearning/neuralNetwork.js \ var savedTraining = network.saveTraining() \ nolink
wrk.NeuralNetwork.loadTraining(savedTraining) \ Load the training from a nested array in the form exported by wrk.NeuralNetwork.saveTraining(). The network that is loading the training must have already had its layers created and connected. Fails if the network that saved the training doesn't have the same layer sizes and amounts as the one receiving the training. \ /src/machineLearning/neuralNetwork.js \ network.loadTraining(savedTraining) \ nolink
wrk.NeuralNetwork.propagate(target) \ propagate how wrong you were (should this be in the public API or is it the network's private data) \ /src/machineLearning/neuralNetwork.js \ network.propagate([0, 1]) \ nolink